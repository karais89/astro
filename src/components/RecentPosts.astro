---
import { getCollection } from 'astro:content';

interface Props {
  count?: number;
  sections?: string[]; // e.g., ['til'] or ['til', 'blog']
}

const { count = 5, sections } = Astro.props as Props;

const entries = await getCollection('docs', ({ id, data }) => {
  // Include only selected sections (prefix match) and exclude drafts
  const allowed = Array.isArray(sections) && sections.length > 0
    ? sections.some((s) => id.startsWith(`${s}/`))
    : id.startsWith('til/') || id.startsWith('coding-test/') || id.startsWith('blog/');
  return allowed && data?.draft !== true;
});

const getDate = (e: any) => new Date((e.data?.date ?? e.data?.createdAt ?? 0) as string | number);
const recent = entries
  .sort((a, b) => Number(getDate(b)) - Number(getDate(a)))
  .slice(0, count);
---

{recent.length === 0 ? (
  <p>아직 게시된 글이 없어요.</p>
) : (
  <ul class="recent-list">
    {recent.map((e) => {
      const base = import.meta.env.BASE_URL || '/';
      const href = `${base}${e.slug}/`;
      const d = getDate(e);
      const dateStr = isNaN(d.getTime()) ? '' : d.toISOString().slice(0, 10);
      const desc = e.data?.description as string | undefined;
      const tags = (e.data?.tags as string[] | undefined) ?? [];
      return (
        <li class="recent-item">
          <div class="recent-main">
            <a href={href} class="recent-link">{e.data.title ?? e.slug}</a>
            {desc && <p class="recent-desc">{desc}</p>}
            {tags.length > 0 && (
              <div class="recent-tags">
                {tags.slice(0, 5).map((t) => (
                  <span class="tag">{t}</span>
                ))}
              </div>
            )}
          </div>
          {dateStr && <time datetime={dateStr} class="recent-date">{dateStr}</time>}
        </li>
      );
    })}
  </ul>
)}

<style>
  .recent-list {
    list-style: none;
    padding: 0;
    margin: 0;
    display: grid;
    gap: 0.5rem;
  }
  .recent-item {
    display: grid;
    grid-template-columns: 1fr auto;
    gap: 0.5rem 1rem;
    padding: 0.75rem 0.25rem;
    border-bottom: 1px solid var(--sl-color-gray-6);
  }
  .recent-main { min-width: 0; }
  .recent-link {
    color: var(--sl-color-text);
    text-decoration: none;
    font-weight: 600;
    display: inline-block;
    margin-bottom: 0.125rem;
  }
  .recent-link:hover,
  .recent-link:focus {
    text-decoration: underline;
  }
  .recent-desc { margin: 0.125rem 0 0.375rem 0; color: var(--sl-color-gray-2); }
  .recent-tags { display: flex; gap: 0.375rem; flex-wrap: wrap; }
  .tag {
    border: 1px solid var(--sl-color-gray-6);
    border-radius: 999px;
    padding: 0.125rem 0.5rem;
    font-size: 0.8rem;
    color: var(--sl-color-gray-2);
    background: var(--sl-color-gray-7);
  }
  .recent-date {
    color: var(--sl-color-gray-2);
    font-variant-numeric: tabular-nums;
    white-space: nowrap;
  }
</style>
